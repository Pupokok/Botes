from aiogram import types
from keyboards import kb_client
from inline_keyboards import inline_kb
from aiogram.filters import CommandStart, StateFilter
from aiogram import Router
from data_base import sqlite
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from utils.states import OrderFood


router = Router()


@router.message(CommandStart())
async def start(message: types.Message):
    await message.answer(f'''
–ü—Ä–∏–≤–µ—Ç üëã
<b>{message.from_user.first_name}</b>

Russellstr_Bot –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º!

–Ø –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫, –ø–æ–¥—Å–∫–∞–∂—É –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å, —Ä–∞—Å—Å–∫–∞–∂—É –æ —Å—Ä–æ–∫–∞—Ö –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –ø–æ–º–æ–≥—É —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º —Ç–≤–æ–µ–≥–æ –±—É–¥—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞ —Å –ø–ª–æ—â–∞–¥–∫–∏ Poizonü´∂

–ö–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é? –û—Ç–≤–µ—Ç–∏–ª –Ω–∏–∂–µ üîΩ

‚Ä¢–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã: /start

‚Ä¢–í—ã—Ö–æ–¥ –∫ –Ω–∞—á–∞–ª—É: /menu
    
‚Ä¢–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑: /buy
''', reply_markup=kb_client)


@router.message(StateFilter(None), lambda message: message.text.lower() in ["/–∏—Ç–æ–≥–æ–≤–∞—è—Å—Ç–æ–∏–º–æ—Å—Ç—å", "–∏—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", "–∏—Ç–æ–≥–æ–≤–∞—è—Å—Ç–æ–∏–º–æ—Å—Ç—å", "/–∏—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"])
async def cmd_food(message: types.Message, state: FSMContext):
    await state.set_state(OrderFood.choosing_food_name)
    await message.answer(text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö:")

@router.message(OrderFood.choosing_food_name)
async def food_chosen(message: Message, state: FSMContext):
    try:
        chosen_food = int(message.text)
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    await state.update_data(chosen_food=chosen_food)
    user_data = await state.get_data()
    add_uan = await sqlite.sql_read_cur(message)
    result = user_data['chosen_food'] * add_uan + 750
    result_message = f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–≤–Ω–∞: {result:.2f}\n–î–æ—Å—Ç–∞–≤–∫–∞ –≤ –†–æ—Å—Å–∏—é —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤—ã–π–¥–µ—Ç ~1200-1800‚ÇΩ(–∏—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –∏ –º–æ–¥–µ–ª–∏ –∫—Ä–æ—Å—Å–æ–≤–æ–∫)"
    await message.answer(result_message)
    await state.clear()


@router.message()
async def echo(message: types.Message):
    msg = message.text.lower()

    if msg == "—Å—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏":
        await message.answer("–°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ 15 ‚Äî 25 –¥–Ω–µ–π (–í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–≥–∏–æ–Ω–∞)")
    elif msg == "–∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å":
        act_cur = await sqlite.sql_read_cur(message)
        await message.answer(f"–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å —é–∞–Ω—è = {act_cur}")

    elif msg == "—Ç–æ–≤–∞—Ä":
        await sqlite.sql_read(message)
    elif msg == "–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑":
        await message.answer("–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É –≤–∞—Å –≤—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä", reply_markup=inline_kb)